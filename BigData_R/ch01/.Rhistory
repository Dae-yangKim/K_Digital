mtcars$wt
install.packages('ggplot2')
library(ggplot2)
str(airquality)
ggplot(airquality , aes(x = Day , y = Temp))
+ geom_point()
install.packages('ggplot2')
library(ggplot2)
str(airquality)
ggplot(airquality , aes(x = Day , y = Temp))
+ geom_point()
ggplot(airquality , aes(x = Day , y = Temp)) + geom_point()
ggplot(airquality , aes(x = Day , y = Temp)) + geom_point(
size = 3 , color = 'red'
)
p <- ggplot(airquality , aes(x = Day , y = Temp)) + geom_line()
print(p)
ggplot(mtcars , aes(x = cyl)) + geom_bar(width = 0.5)
ggplot(mtcars , aes(x = factor(cyl))) +
geom_bar(aes(fill = factor(gear))) +
coord_polar(theta = 'y')
ggplot(airquality , aes(x = Day , y = Temp)) + geom_point(
size = 3 , color = 'red'
)
print(p)
print(p)
ggplot(mtcars , aes(x = cyl)) + geom_bar(width = 0.5)
ggplot(mtcars , aes(x = factor(cyl))) +
geom_bar(aes(fill = factor(gear))) +
coord_polar(theta = 'y')
# 누적 막대 그래프
ggplot(mtcars , aes(x = factor(cyl))) +
geom_bar(aes(fill = factor(gear)))
# 상자수염그림
ggplot(airquality , aes(x = Day , y = Temp , group = Day)) +
geom_boxplot()
# 히스토그램
ggplot(airquality , aes(Temp)) +
geom_histogram()
ggplot(airqaulity , aes(Temp)) +
geom_histogram(binwidth = 1)
ggplot(airquqlity , aes(Temp)) +
geom_histogram(binwidth = 1)
ggplot(airquality , aes(Temp)) +
geom_histogram(binwidth = 1)
library(ggplot2)
str(ecodnomics)
str(economics)
ggplot(economics , aes(x = date , y = psavert)) + geom_line() +
geom_abline(intercept = 12.18671 , slope = -0.0005444)
# 그래프에 평행선 그리기
ggplot(economics , aes(x = date , y = psavert)) + geom_line() +
geom_line() +
geom_hline(yintercept = mean(economics$psavert))
# 그래프에 평행선 그리기
ggplot(economics , aes(x = date , y = psavert)) + geom_line() +
geom_hline(yintercept = mean(economics$psavert))
# 그래프에 수직선 그리기
library(dplyr)
x_inter <- filter(economics , psavert == min(economics$psavert))$date
x_inter
ggplot(economics , aes(x = date , y = psavert)) +
geom_line() +
geom_vline(xintercept = x_inter)
# 그래프에 텍스트 입력하기
ggplot(airquality , aes(x = Day , y = Temp)) +
geom_point() +
geom_text(aes(label = Temp , vjust = 0 , hjust = 0))
# 그래프에 사각형 그리기
ggplot(mtcars , aes(x = wt , y = mpg)) +
geom_point() +
annotate("rect" , xmin = 3 , xmax = 4 , ymin = 12 , ymax = 21 ,
alpha = 0.5 , fill = "skyblue")
# 그래프에 화살표 그리기
ggplot(mtcars , aes(x = wt , y = mpg)) +
geom_point() +
annotate("rect" , xmin = 3 , xmax = 4 , ymin = 12 , ymax = 21 ,
alpha = 0.5 , fill = "skyblue") +
annotate("segment" , x = 2.5 , xend = 3.7 , y = 10 , yend = 17 ,
color = "red" , arrow = arrow())
# 그래프에 도형과 텍스트를 함께 표시하기
ggplot(mtcars , aes(x = wt , y = mpg)) +
geom_point() +
annotate("rect" , xmin = 3 , xmax = 4 , ymin = 12 , ymax = 21 ,
alpha = 0.5 , fill = "skyblue") +
annotate("segment" , x = 2.5 , xend = 3.7 , y = 10 , yend = 17 ,
color = "red" , arrow = arrow()) +
annotate("text" , x = 2.5 , y = 10 , label = "point")
ggplot(mtcars , aes(x = gear)) + geom_bar() +
labs(x = "기어수" , y = "자동차수" , title = "변속기 기어별 자동차수")
library(readxl)
exdata1
View(exdata1)
# 두 변수 간 상관관계 파악
# cor.test() 함수 사용
cor.test(exdata1$Y20_CNT , exdata1$Y21_CNT)
# 회귀분석하여 절편과 기울기 구하기
reg_result <- lm(Y21_CNT ~ Y20_CNT , data = exdata1)
source("C:/Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch01/ggplot2.R", echo=TRUE)
reg_result
ggplot(exdata1 , aes(x = Y20_CNT , y = Y21_CNT)) +
geom_line() +
geom_abline(intercept = 0.7104 , slope = 0.7864)
displot()
library(readxl)
forest_example_data <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/전국휴양림표준데이터-20231102.xlsx")
forest_example_data <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open.xls")
View(forest_example_data)
colnames(forest_example_data) <- c("name" , "city" , "gubun" , "area" ,
"number" , "stay" , "citgy_new" , "code" ,
"codename")
forest_example_data
str(forest_example_data)
head(forest_example_data)
library(descr)
freq(forest_example_data , plot = T , main = 'city')
freq(forest_example_data$city , plot = T , main = 'city')
city_table <- table(forest_example_data)
city_table
city_table <- table(forest_example_data$city)
city_table
city_table
barplot(city_table)
library(dplyr)
count(forest_example_data , city)
count(forest_example_data , city) %>% arrange(desc(n))
count(forest_example_data , city_new) %>% arrange(desc(n))
str(forest_example_data)
colnames(forest_example_data) <- c("name" , "city" , "gubun" , "area" ,
"number" , "stay" , "city_new" , "code" ,
"codename")
count(forest_example_data , city_new) %>% arrange(desc(n))
count(forest_example_data , codename) %>% arrange(desc(n))
# 데이터 가공(2) : 데이터 재구조화하기
library(readxl)
entrance_xls <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open02.xls")
View(entrance_xls)
str(entrance_xls)
head(entrance_xls)
# 컬럼명 변경과 공백 제거하기
colnames(entrance_xls) <- c("country" , "JAN" , "FEB" , "MAR" , "APR" , "MAY" ,
"JUN" , "JUL" , "AUG" , "SEP" , "OCT" , "NOV" , "DEC")
entrance_xls$country
entrance_xls$country <- gsub(" " , "" , entrance_xls$country)
entrance_xls
extrance_xls |> nrow()
entrance_xls
entrance_xls |> nrow()
top5_country <- entrance_xls[order(-entrance_xls$JAN), ] |> head(n = 5)
top5_country
library(reshape2)
top5_melt <- melt(top5_country , id.vars = 'country' , variable.name = 'mon')
head(top5_melt)
# 시각화 하기
library(ggplot2)
ggplot(top5_melt , aes(x = mon , y = value , group = country)) +
geom_line(aes(color = country))
ggplot(top5_melt , aes(x = mon , y = value , group = country)) +
geom_line(aes(color = country)) +
ggtitle("2020년 국적별 입국 수 변화 추이") +
scale_y_continuous(breaks = seq(0 , 500000 , 50000))
ggplot(top5_melt , aes(x = mon , y = value , fill = country)) +
geom_bar(stat = 'identity' , position = 'dodge')
ggplot(top5_melt , aes(x = mon , y = value , fill = country)) +
geom_bar(stat = 'identity' , position = 'stack')
library(readxl)
dustdata <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open03.xlsx")
View(dustdata)
str(dustdata)
library(dplyr)
dustdata <- dustdata[, c("날짜" , "성북구" , "중구")]
View(dustdata)
dustdata <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open03.xlsx")
View(dustdata)
library(dplyr)
dustdata <- dustdata[, c("날짜" , "성북구" , "중구")]
d
View(dustdata)
dustdata <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open03.xlsx")
View(dustdata)
dustdata <- dustdata[, c("날짜" , "성북구" , "중구")]
View(dustdata)
is.na(dustdata_anal)
dustdata <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open03.xlsx")
dustdata_anal <- dustdata[, c("날짜" , "성북구" , "중구")]
is.na(dustdata_anl)
is.na(dustdata_anal)
sum(is.na(dustdata_anal))
# 시각화
library(psych)
describe(dustdata_anal$성북구)
describe(dustdata_anal$중구)
boxplot(dustdata_anal$성북구 , dustdata_anal$중구 ,
main = "finedust_compare" , xlab = 'AREA' , names = c("성북구" , "중구") ,
ylab = "FINEDUST_PM" , col = c("blue" , "green"))
# 가설 검정하기
var.test(dustdata_anal$중구 , dustdata_anal$성북구)
t.test(dustdata_anal$중구 , dustdata_anal$성북구 , var.equal = T)
# ANOVA
library(readxl)
exdata <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch05/Sample1.xlsx")
exdata1
boxplot(formula = Y20_CNT ~ AREA , data = exdata1)
anova(lm(Y20_CNT ~ AREA , data = exdata1))
# oneway.test()
oneway.test(data = exdata1 , Y20_CNT ~ AREA , var.equal = T)
library(readxl)
xlsdata <- read_excel("C://Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch07/open04.xls")
View(xlsdat)
View(xlsdata)
data_raw <- xlsdata[, c(2 : 5)]
head(data_raw)
names(data_raw)
names(data_raw) <- c("state" , "city" , "name" , "addr")
names(data_raw)
table(data_raw$state)
barplot(table(data_raw$state))
daejeon_data <- data_raw[data_raw$state == "대전" , ]
head(daejeon_data)
nrow(daejeon_data)
library(ggmap)
cor.test(x$x , x$y , method = "pearson")
x <- data.frame(x = c(1 , 2 , 3 , 4 , 5 , y = c(8 , 7 , 6 , 4 , 5))
cor.test(x$x , x$y , method = "pearson")
x <- data.frame(x = c(1 , 2 , 3 , 4 , 5 , y = c(8 , 7 , 6 , 4 , 5))
cor.test(x$x , x$y , method = "pearson")
x <- data.frame(count = c(1 , 2 , 3 , 4 , 5 , sale = c(8 , 7 , 6 , 4 , 5))
cor.test(x$count , x$sale , method = "pearson")
cor.test(x$count , x$sale , method = "pearson")
x <- data.frame(count = c(1 , 2 , 3 , 4 , 5 , sale = c(8 , 7 , 6 , 4 , 5))
x
x
x
x <- data.frame(count = c(1 , 2 , 3 , 4 , 5 , sale = c(8 , 7 , 6 , 4 , 5))
x
x
x <- data.frame(count = c(1 , 2 , 3 , 4 , 5 , sale = c(8 , 7 , 6 , 4 , 5))
x
x <- data.frame(count = c(1 , 2 , 3 , 4 , 5 , sale = c(8 , 7 , 6 , 4 , 5))
x
x <- data.frame(count = c(1 , 2 , 3 , 4 , 5) , sale = c(8 , 7 , 6 , 4 , 5))
x
cor.test(x$count , x$sale , method = 'pearson')
rnorm(100 , 0 , 10)
x <- rnorm(100 , 0 , 10)
source("C:/Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch08/distribution.R", echo=TRUE)
x <- rnorm(100 , 0 , 10) # 100개의 난수 생성 , 평균 0 , 표준편차 10
x
plot(density(x))
x <- rnorm(100 , 0 , 10) # 100개의 난수 생성 , 평균 0 , 표준편차 10
plot(density(x))
x <- rnorm(100 , 0 , 10) # 100개의 난수 생성 , 평균 0 , 표준편차 10
plot(density(x))
plot(density(rnorm(1000000, 0, 10)))
hanashiwo
plot(density(rnorm(1000000, 0, 10))) # 개수가 많아질수록 정규분포에 가까워 진다.
plot(density(rnorm(1000000, 0, 10))) # 개수가 많아질수록 정규분포에 가까워 진다.
plot(density(rnorm(1000000, 0, 10))) # 개수가 많아질수록 정규분포에 가까워 진다.
plot(density(rnorm(1000000, 0, 10))) # 개수가 많아질수록 정규분포에 가까워 진다.
plot(density(rnorm(1000000, 0, 10))) # 개수가 많아질수록 정규분포에 가까워 진다.
x <- c(1 : 13)
x
x
x
x <- c(1 : 11)
x
fivenum(x)
summary(x)
x <- factor(c("a", "b", "c", "c", "c", "d", "d"))
x
table(x)
which.max(table(x))
names(table(x))
names(which.max(table(x)))
sample(
1 : 10 ,
5
)
library()
install.packages("sampling")
library(sampling)
x <- strata(c("Species") , size = c(3 , 3 , 3) , method = "srswor" , data = iris)
x
source("C:/Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch08/distribution.R", echo=TRUE)
install.packages("sampling")
x <- strata(c("Species") , size = c(3 , 3 , 3) , method = "srswor" , data = iris)
x
getdata(iris , x)
print(str(iris))
hello world!
iris$Species2 <- rep(1:2 , 75)
strata(c("Species" , "Species2") , size = c(1 , 1 , 1 , 1 , 1 , 1) , method = "srswr" , data = iris)
getdata(iris , x)
x <- data.frame(x = 1:10)
x
View(x)
sampleBy(~1 , frac = .3 , data = x , systematic = T)
sampleBy(~1 , frac = .3 , data = x , systematic = T)
sampleBy(~1 , frac = .3 , data = x , systematic = T)
y <- sampleBy(~1 , frac = .3 , data = x , systematic = T)
library(sampling)
y <- sampleBy(~1 , frac = .3 , data = x , systematic = T)
library(doBy)
y <- sampleBy(~1 , frac = .3 , data = x , systematic = T)
y
table(c("a", "b", "b", "b", "c", "c", "d"))
x <- table(c("a", "b", "b", "b", "c", "c", "d"))
d <- data.frame(x = c("1" , "2" , "3" , "4") , y = c("A" , "B" , "A" , "B"))
d
print(d)
d
z <- xtabs(num ~ x + y , data = d)
z
d <- data.frame(x = c("1" , "2" , "3" , "4") , y = c("A" , "B" , "A" , "B") ,
num = c(3 , 5 , 8 , 7))
d
z <- xtabs(num ~ x + y , data = d)
z
d2 <- data.frame(x = c("A" , "A" , "A" , "B" , "B"))
z2 <- xtab(~x , d2)
z2 <- xtabs(~x , d2)
z2
z2
xt <- xtabs(num ~ x + y , data = d)
xt
margin.table(xt , 1)
margin.table(xt , 2)
margin.table(xt)
prop.table(xt , 2)
library(MASS)
data(survey)
str(survey)
head(survey[c("Sex" , "Exer")])
chitab <- xtabs(~ W.Hnd + Clap , data = survey)
chitab
chi_test <- chisq.test(chitab)
chi_test
fish <- fisher.test(xtabs(~ W.Hnd + Clap , data = survey))
fish
Performance <-
matrix(c(794 , 86 , 150 , 570) ,
nrow = 2 ,
dimnames = list(
"1st Survey" = c("Approve" , "Disapprove") ,
"2nd Survey" = c("Approve" , "Disapprove")))
source("C:/Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch08/tab.R", echo=TRUE)
Performance
Performance
mcnemar.test(Performance)
binom.test(86 , 86 + 150 , .5)
mcnemar.test(Performance)
binom.test(86 , 86 + 150 , .5)
mcnemar.test(Performance)
Performance
mcnemar.test(Performance)
con <- dbConnect(MySQL() , user = 'root' , password = 'eodid9523',
dbname = 'sqldb' , host = '127.0.0.1')
con <- dbConnect(MySQL() , user = 'root' , password = 'eodid9523',
dbname = 'sqldb' , host = '127.0.0.1')
install.packages("RMySQL" , type = 'source')
library(RMySQL)
con <- dbConnect(MySQL() , user = 'root' , password = 'eodid9523',
dbname = 'sqldb' , host = '127.0.0.1')
con
dbListTables(con)
con <- dbConnect(MySQL() , user = 'root' , password = 'eodid9523',
dbname = 'rprogramming' , host = '127.0.0.1')
dbListTables(con)
con <- dbConnect(MySQL() , user = 'root' , password = 'eodid9523',
dbname = 'rprogramming' , host = '127.0.0.1')
dbListTables(con)
dbGetQuery(con , "select * from score");
x <- rnorm(30)
x
x
t.test(x)
help(t.test)
sleep2 <- sleep[, -3]
sleep2
print(tappy(sleep2$extra , sleep2$group , mean))
print(tapply(sleep2$extra , sleep2$group , mean))
library(doBy)
summary(extra ~ group , sleep2)
summaryBy(extra ~ group , sleep2)
var.test(extra ~ group , sleep2)
t.test(extra ~ group , data = sleep2 , paired = F , var.equal = T)
with(sleep , t.test(extra[group == 1] , extra[group == 2] , paired = T))
tattatararira
data(cars)
head(cars)
head(cars)
m <- lm(dist ~ speed , cars)
m
m
coef(m)
ohesoga burori
coef(m)
length(residuals(m))
length(cars)
cars
residuals(m)
# speed=3인 경우의 값을 예측
predict(m , newdata = data.frame(speed=3))
coef(m)
# 모델 평가
summary(m)
source("C:/Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch10/LinearRegression.R", echo=TRUE)
reduced <- lm(dist ~ 1 , data = cars)
full <- lm(dist ~ speed , data = cars)
print(anova(reduced , full))
plot(m , 5)
full <- lm(dist ~ speed , data = cars)
print(cars$speed , cars$dist)
abline(coef(m))
plot(m , 5)
plot(cars$speed , cars$dist)
abline(coef(m))
# 모델 진단 그래프
plot(m)
# 모델 진단 그래프
plot(m , which = c(4 , 6))
predict(m ,
newdata = data.frame(speed = seq(4.0 , 25.0 , .2)) ,
inteval = "confidence")
speed <- seq(min(cars$speed) , max(cars$speed) , .1)
speed
ys <- predict(m , newdata = data.frame(speed = speed) , inteval = "confidence")
ys
matplot(speed , ys , type = 'n')
matlines(speed , ys , lty = c(1 , 2 , 2) , col = 1)
m <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width , data = iris)
summary(m)
model.matrix(m)
anova(m)
with(iris , plot(Sepal.Width , Sepal.Length ,
cex = .7 ,
pch = as.numeric(Species)))
m <- lm(Sepal.Length ~ Sepal.Width +
Species , data = iris)
with(iris , plot(Sepal.Width , Sepal.Length),
cex = .7 , pch = as.numeric(Species))
abline(2.25 , 0.80 , lty = 1)
iris)
m <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width , data = iris)
m
summary(m)
m <- lm(Sepal.Length ~ . , data = iris)
m
m
summary(m)
model.matrix(m)[c(1 , 51 , 101) ,]
anova(m)
with(iris , plot(Sepal.Width , Sepal.Length ,
cex = .7 ,
pch = as.numeric(Species)))
as.numeric(iris$Species)
m <- lm(Sepal.Length ~ Sepal.Width + Species , data = iris)
coef(m)
abline(2.25 , 0.80 , lty = 1)
abline(2.25 + 1.45 , 0.80 , lty = 1)
abline(2.25 + 1.94 , 0.80 , lty = 3)
legend("topright" , levels(iris$Species) , pch = 1 : 3 , bg = "white")
levels(iris$Species)
data("Orange")
orange
orange <- data("Orange")
orange
data(Orange)
source("~/.active-rstudio-document", echo=TRUE)
data(Orange)
m <- lm(circumference ~ age + I(age^2) , data = Orange)
m
rstudent(m)
Orange <- hbind(Orange , data.frame(Tree = as.factor(c(6 , 6 , 6)) ,
age = c(118 , 484 , 664) ,
circumference = c(177 , 50 , 30)))
Orange <- hbind(Orange , data.frame(Tree = as.factor(c(6 , 6 , 6)) ,
age = c(118 , 484 , 664) ,
circumference = c(177 , 50 , 30)))
tail(Orange)
m <- lm(circumference ~ age + I(age^2) , data = Orange)
install.packages("car")
install.packages("car")
print(car::outlierTest(m))
plot(Orange$age , Orange$circumference)
library(mlbench)
install.packages("mlbench")
library(mlbench)
data("BostonHousing")
m <- lm(medv ~ . , data = BostonHousing)
m2 <- step(m , direction = "both") # 단계적 변수 선택
formula(m2)
step(m , direction = 'both')
m2 <- step(m , direction = "both")
formula(m2)
library(boot)
head(survival)
print(str(survival))
print(cor(surviva$dose , survival$surv))
print(cor(survival$dose , survival$surv))
plot(survival$dose , survival$surv)
model <- lm(survival$surv ~ survival$dose , data = survival)
model
pred <- predict(model , survival['dose'])
pred
MAE <- sum(abs(pred - survival$surv) / nrow(survival))
MAE
m <- lm(Sepal.Length ~ . , data = iris)
source("C:/Big_D/BigData_2021320012/K_Digital_BIGDATA/BigData_R/ch10/Feature Selection.R", echo=TRUE)
install.packages("mlbench")
m
m2 <- step(m , direction = 'both')
